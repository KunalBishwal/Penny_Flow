"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/upload/page",{

/***/ "(app-pages-browser)/./lib/gemini.ts":
/*!***********************!*\
  !*** ./lib/gemini.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractExpenseDataFromGemini: () => (/* binding */ extractExpenseDataFromGemini)\n/* harmony export */ });\nasync function extractExpenseDataFromGemini(ocrText) {\n    const apiKey = \"AIzaSyAdRfAux0eLrzSP0X50bp3YbRyhuFJrzq4\";\n    if (!apiKey) {\n        throw new Error(\"Gemini API key is missing. Check your .env.local file.\");\n    }\n    const endpoint = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\".concat(apiKey);\n    const prompt = '\\nYou are an intelligent expense parser. Extract the following from messy receipt text:\\n- vendor\\n- amount (number only, no symbols)\\n- date (ISO format preferred)\\n- category (Food, Transport, Shopping, Utilities, Entertainment, Other)\\n\\nReceipt text:\\n\"\"\"\\n'.concat(ocrText, '\\n\"\"\"\\n\\nRespond ONLY with JSON like:\\n{\\n  \"vendor\": \"...\",\\n  \"amount\": \"...\",\\n  \"date\": \"...\",\\n  \"category\": \"...\"\\n}\\n  ');\n    try {\n        var _result_candidates, _candidate_content_parts_, _candidate_content_parts, _candidate_content;\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ]\n            })\n        });\n        const result = await response.json();\n        console.log(\"üîç Gemini full response:\", JSON.stringify(result, null, 2));\n        // Catch Gemini-specific API errors\n        if (result.error) {\n            console.error(\"üî• Gemini API Error:\", result.error);\n            throw new Error(result.error.message || \"Unknown Gemini API error\");\n        }\n        const candidate = result === null || result === void 0 ? void 0 : (_result_candidates = result.candidates) === null || _result_candidates === void 0 ? void 0 : _result_candidates[0];\n        if (!candidate) {\n            console.error(\"‚ùå No candidates. Full response:\", JSON.stringify(result, null, 2));\n            throw new Error(\"No candidate found in Gemini response\");\n        }\n        const text = candidate === null || candidate === void 0 ? void 0 : (_candidate_content = candidate.content) === null || _candidate_content === void 0 ? void 0 : (_candidate_content_parts = _candidate_content.parts) === null || _candidate_content_parts === void 0 ? void 0 : (_candidate_content_parts_ = _candidate_content_parts[0]) === null || _candidate_content_parts_ === void 0 ? void 0 : _candidate_content_parts_.text;\n        if (!text) {\n            console.error(\"‚ö†Ô∏è Candidate text missing. Candidate object:\", candidate);\n            throw new Error(\"Gemini returned empty candidate text\");\n        }\n        try {\n            const json = JSON.parse(text);\n            console.log(\"‚úÖ Parsed Gemini response JSON:\", json);\n            return json;\n        } catch (parseError) {\n            console.error(\"üß® JSON parsing error:\", parseError, \"Raw text received:\", text);\n            throw new Error(\"Failed to parse Gemini candidate text as JSON\");\n        }\n    } catch (err) {\n        console.error(\"‚ùå Error in extractExpenseDataFromGemini:\", err);\n        throw err;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9nZW1pbmkudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLGVBQWVBLDZCQUE2QkMsT0FBZTtJQUNoRSxNQUFNQyxTQUFTQyx5Q0FBc0M7SUFFckQsSUFBSSxDQUFDRCxRQUFRO1FBQ1gsTUFBTSxJQUFJSSxNQUFNO0lBQ2xCO0lBRUEsTUFBTUMsV0FBVywwRkFBaUcsT0FBUEw7SUFFM0csTUFBTU0sU0FBUyx3UUFTUCxPQUFSUCxTQUFRO0lBWVIsSUFBSTtZQXdCZ0JRLG9CQU1MQywyQkFBQUEsMEJBQUFBO1FBN0JiLE1BQU1DLFdBQVcsTUFBTUMsTUFBTUwsVUFBVTtZQUNyQ00sUUFBUTtZQUNSQyxTQUFTO2dCQUNQLGdCQUFnQjtZQUNsQjtZQUNBQyxNQUFNQyxLQUFLQyxTQUFTLENBQUM7Z0JBQ25CQyxVQUFVO29CQUNSO3dCQUNFQyxPQUFPOzRCQUFDO2dDQUFFQyxNQUFNWjs0QkFBTzt5QkFBRTtvQkFDM0I7aUJBQ0Q7WUFDSDtRQUNGO1FBRUEsTUFBTUMsU0FBUyxNQUFNRSxTQUFTVSxJQUFJO1FBQ2xDQyxRQUFRQyxHQUFHLENBQUMsNEJBQTRCUCxLQUFLQyxTQUFTLENBQUNSLFFBQVEsTUFBTTtRQUVyRSxtQ0FBbUM7UUFDbkMsSUFBSUEsT0FBT2UsS0FBSyxFQUFFO1lBQ2hCRixRQUFRRSxLQUFLLENBQUMsd0JBQXdCZixPQUFPZSxLQUFLO1lBQ2xELE1BQU0sSUFBSWxCLE1BQU1HLE9BQU9lLEtBQUssQ0FBQ0MsT0FBTyxJQUFJO1FBQzFDO1FBRUEsTUFBTWYsWUFBWUQsbUJBQUFBLDhCQUFBQSxxQkFBQUEsT0FBUWlCLFVBQVUsY0FBbEJqQix5Q0FBQUEsa0JBQW9CLENBQUMsRUFBRTtRQUN6QyxJQUFJLENBQUNDLFdBQVc7WUFDZFksUUFBUUUsS0FBSyxDQUFDLG1DQUFtQ1IsS0FBS0MsU0FBUyxDQUFDUixRQUFRLE1BQU07WUFDOUUsTUFBTSxJQUFJSCxNQUFNO1FBQ2xCO1FBRUEsTUFBTWMsT0FBT1Ysc0JBQUFBLGlDQUFBQSxxQkFBQUEsVUFBV2lCLE9BQU8sY0FBbEJqQiwwQ0FBQUEsMkJBQUFBLG1CQUFvQlMsS0FBSyxjQUF6QlQsZ0RBQUFBLDRCQUFBQSx3QkFBMkIsQ0FBQyxFQUFFLGNBQTlCQSxnREFBQUEsMEJBQWdDVSxJQUFJO1FBQ2pELElBQUksQ0FBQ0EsTUFBTTtZQUNURSxRQUFRRSxLQUFLLENBQUMsZ0RBQWdEZDtZQUM5RCxNQUFNLElBQUlKLE1BQU07UUFDbEI7UUFFQSxJQUFJO1lBQ0YsTUFBTWUsT0FBT0wsS0FBS1ksS0FBSyxDQUFDUjtZQUN4QkUsUUFBUUMsR0FBRyxDQUFDLGtDQUFrQ0Y7WUFDOUMsT0FBT0E7UUFDVCxFQUFFLE9BQU9RLFlBQVk7WUFDbkJQLFFBQVFFLEtBQUssQ0FBQywwQkFBMEJLLFlBQVksc0JBQXNCVDtZQUMxRSxNQUFNLElBQUlkLE1BQU07UUFDbEI7SUFDRixFQUFFLE9BQU93QixLQUFLO1FBQ1pSLFFBQVFFLEtBQUssQ0FBQyw0Q0FBNENNO1FBQzFELE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsiQzpcXEhUTUwgQ1NTXFxXRUIgREVWIENPVVJTRSBIXFxSZWFjdFxcSGFja2F0aG9uXFx0cnlcXHRyeTFcXGV4cGVuc2UtdHJhY2tlclxcbGliXFxnZW1pbmkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RFeHBlbnNlRGF0YUZyb21HZW1pbmkob2NyVGV4dDogc3RyaW5nKSB7XHJcbiAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR0VNSU5JX0FQSV9LRVk7XHJcblxyXG4gIGlmICghYXBpS2V5KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW1pbmkgQVBJIGtleSBpcyBtaXNzaW5nLiBDaGVjayB5b3VyIC5lbnYubG9jYWwgZmlsZS5cIik7XHJcbiAgfVxyXG5cclxuICBjb25zdCBlbmRwb2ludCA9IGBodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzL2dlbWluaS1wcm86Z2VuZXJhdGVDb250ZW50P2tleT0ke2FwaUtleX1gO1xyXG5cclxuICBjb25zdCBwcm9tcHQgPSBgXHJcbllvdSBhcmUgYW4gaW50ZWxsaWdlbnQgZXhwZW5zZSBwYXJzZXIuIEV4dHJhY3QgdGhlIGZvbGxvd2luZyBmcm9tIG1lc3N5IHJlY2VpcHQgdGV4dDpcclxuLSB2ZW5kb3JcclxuLSBhbW91bnQgKG51bWJlciBvbmx5LCBubyBzeW1ib2xzKVxyXG4tIGRhdGUgKElTTyBmb3JtYXQgcHJlZmVycmVkKVxyXG4tIGNhdGVnb3J5IChGb29kLCBUcmFuc3BvcnQsIFNob3BwaW5nLCBVdGlsaXRpZXMsIEVudGVydGFpbm1lbnQsIE90aGVyKVxyXG5cclxuUmVjZWlwdCB0ZXh0OlxyXG5cIlwiXCJcclxuJHtvY3JUZXh0fVxyXG5cIlwiXCJcclxuXHJcblJlc3BvbmQgT05MWSB3aXRoIEpTT04gbGlrZTpcclxue1xyXG4gIFwidmVuZG9yXCI6IFwiLi4uXCIsXHJcbiAgXCJhbW91bnRcIjogXCIuLi5cIixcclxuICBcImRhdGVcIjogXCIuLi5cIixcclxuICBcImNhdGVnb3J5XCI6IFwiLi4uXCJcclxufVxyXG4gIGA7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGVuZHBvaW50LCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGNvbnRlbnRzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhcnRzOiBbeyB0ZXh0OiBwcm9tcHQgfV0sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgY29uc29sZS5sb2coXCLwn5SNIEdlbWluaSBmdWxsIHJlc3BvbnNlOlwiLCBKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpKTtcclxuXHJcbiAgICAvLyBDYXRjaCBHZW1pbmktc3BlY2lmaWMgQVBJIGVycm9yc1xyXG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwi8J+UpSBHZW1pbmkgQVBJIEVycm9yOlwiLCByZXN1bHQuZXJyb3IpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yLm1lc3NhZ2UgfHwgXCJVbmtub3duIEdlbWluaSBBUEkgZXJyb3JcIik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2FuZGlkYXRlID0gcmVzdWx0Py5jYW5kaWRhdGVzPy5bMF07XHJcbiAgICBpZiAoIWNhbmRpZGF0ZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwi4p2MIE5vIGNhbmRpZGF0ZXMuIEZ1bGwgcmVzcG9uc2U6XCIsIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBjYW5kaWRhdGUgZm91bmQgaW4gR2VtaW5pIHJlc3BvbnNlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRleHQgPSBjYW5kaWRhdGU/LmNvbnRlbnQ/LnBhcnRzPy5bMF0/LnRleHQ7XHJcbiAgICBpZiAoIXRleHQpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIuKaoO+4jyBDYW5kaWRhdGUgdGV4dCBtaXNzaW5nLiBDYW5kaWRhdGUgb2JqZWN0OlwiLCBjYW5kaWRhdGUpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW1pbmkgcmV0dXJuZWQgZW1wdHkgY2FuZGlkYXRlIHRleHRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UodGV4dCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi4pyFIFBhcnNlZCBHZW1pbmkgcmVzcG9uc2UgSlNPTjpcIiwganNvbik7XHJcbiAgICAgIHJldHVybiBqc29uO1xyXG4gICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwi8J+nqCBKU09OIHBhcnNpbmcgZXJyb3I6XCIsIHBhcnNlRXJyb3IsIFwiUmF3IHRleHQgcmVjZWl2ZWQ6XCIsIHRleHQpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgR2VtaW5pIGNhbmRpZGF0ZSB0ZXh0IGFzIEpTT05cIik7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwi4p2MIEVycm9yIGluIGV4dHJhY3RFeHBlbnNlRGF0YUZyb21HZW1pbmk6XCIsIGVycik7XHJcbiAgICB0aHJvdyBlcnI7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJleHRyYWN0RXhwZW5zZURhdGFGcm9tR2VtaW5pIiwib2NyVGV4dCIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19HRU1JTklfQVBJX0tFWSIsIkVycm9yIiwiZW5kcG9pbnQiLCJwcm9tcHQiLCJyZXN1bHQiLCJjYW5kaWRhdGUiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY29udGVudHMiLCJwYXJ0cyIsInRleHQiLCJqc29uIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwibWVzc2FnZSIsImNhbmRpZGF0ZXMiLCJjb250ZW50IiwicGFyc2UiLCJwYXJzZUVycm9yIiwiZXJyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/gemini.ts\n"));

/***/ })

});